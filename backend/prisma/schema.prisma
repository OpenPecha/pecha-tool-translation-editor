generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(uuid())
  username    String?
  email       String          @unique
  createdAt   DateTime        @default(now())
  picture     String?
  apikeys     ApiCredential[]
  comments    Comment[]
  documents   Doc[]           @relation("UserDocs")
  footnotes   Footnote[]
  permissions Permission[]
  project     Project[]
  version     Version[]
}

model Project {
  id           String       @id @default(uuid())
  name         String
  identifier   String       @unique
  ownerId      String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  metadata     Json?
  status       String       @default("active")
  isPublic     Boolean      @default(false)
  publicAccess String       @default("none")
  shareLink    String?      @unique
  roots        Doc[]        @relation("Roots") 
  permissions  Permission[] @relation("ProjectPermissions")
  owner        User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model Doc {
  id                     String    @id @default(uuid())
  identifier             String    @unique
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  ownerId                String?
  isRoot                 Boolean   @default(false)
  language               String    @default("bo")
  root                   Doc?      @relation("Root", fields: [rootId], references: [id], onDelete: Cascade)
  rootId                 String?
  translations           Doc[]     @relation("Root")
  metadata               Json?
  rootProject            Project?  @relation("Roots", fields: [rootProjectId], references: [id], onDelete: Cascade)
  rootProjectId          String?
  name                   String    @default("document")
  comments               Comment[]
  owner                  User?     @relation("UserDocs", fields: [ownerId], references: [id], onDelete: Cascade)

  permissions      Permission[] // A document can have multiple permission entries
  versions         Version[] // A document can have multiple versions
  footnotes        Footnote[] // A document can have multiple footnotes
  currentVersionId String?      @unique
  currentVersion   Version?     @relation("CurrentVersion", fields: [currentVersionId], references: [id])

  @@index([ownerId])
  @@index([rootId])
  @@index([rootProjectId])
}

model Permission {
  id          String   @id @default(uuid())
  userId      String?
  canRead     Boolean  @default(true)
  canWrite    Boolean  @default(false)
  docId       String?
  createdAt   DateTime @default(now())
  projectId   String?
  updatedAt   DateTime @updatedAt
  accessLevel String   @default("viewer")
  doc         Doc?     @relation(fields: [docId], references: [id], onDelete: Cascade)
  Project     Project? @relation("ProjectPermissions", fields: [projectId], references: [id])
  user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([docId, userId])
  @@index([docId])
  @@index([userId])
  @@index([projectId])
}

model Comment {
  id                   String    @id @default(uuid())
  docId                String
  userId               String
  content              String
  parentCommentId      String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  initial_start_offset Int
  initial_end_offset   Int
  is_suggestion        Boolean   @default(false)
  suggested_text       String?
  threadId             String?
  comment_on           String?
  doc                  Doc       @relation(fields: [docId], references: [id], onDelete: Cascade)
  parentComment        Comment?  @relation("parentComment", fields: [parentCommentId], references: [id])
  childComments        Comment[] @relation("parentComment")
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Footnote {
  id                   String   @id @default(uuid())
  threadId             String?
  docId                String
  userId               String
  content              String
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  note_on              String?
  initial_start_offset Int
  initial_end_offset   Int
  order                Int      @default(0)
  doc                  Doc      @relation(fields: [docId], references: [id], onDelete: Cascade)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Version {
  id         String   @id @default(uuid())
  docId      String
  label      String
  content    Json
  userId     String?
  doc        Doc      @relation(fields: [docId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  currentDoc Doc?     @relation("CurrentVersion")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
}

model ApiCredential {
  id        String   @id @default(cuid())
  userId    String
  provider  String
  apiKeyEnc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
